users
 - id
 - login
 - password

CREATE TABLE IF NOT EXISTS users (
	id BIGSERIAL NOT NULL,
	login VARCHAR(255) NOT NULL,
	password VARCHAR(255) NOT NULL,
	PRIMARY KEY (id),
	UNIQUE(login)
);

=========================

orders
 - id
 - number
 - status NEW, PROCESSING, INVALID, PROCESSED
 - user_id
 - uploaded_at

CREATE TYPE OrderStatuses AS ENUM ('NEW', 'PROCESSING', 'INVALID', 'PROCESSED');

CREATE TABLE IF NOT EXISTS orders (
	id BIGSERIAL NOT NULL,
	number VARCHAR(255) NOT NULL,
	status OrderStatuses NOT NULL DEFAULT 'NEW',
	user_id BIGINT NOT NULL,
	uploaded_at TIMESTAMP NOT NULL DEFAULT NOW(),
	PRIMARY KEY (id),
	CONSTRAINT fk_user
        FOREIGN KEY(user_id)
            REFERENCES users(id)
);

=========================

balance
 - id
 - current
 - withdrawn
 - user_id

CREATE TABLE IF NOT EXISTS balance (
	id BIGSERIAL NOT NULL,
	current NUMERIC NOT NULL DEFAULT 0 CHECK (current >= 0),
	withdrawn NUMERIC NOT NULL DEFAULT 0 CHECK (withdrawn >= 0),
	user_id BIGINT NOT NULL,
	PRIMARY KEY (id),
	CONSTRAINT fk_user
        FOREIGN KEY(user_id)
            REFERENCES users(id)
);

=========================

withdrawals
 - id
 - order
 - sum
 - user_id
 - processed_at

CREATE TABLE IF NOT EXISTS withdrawals (
	id BIGSERIAL NOT NULL,
	"order" VARCHAR(255) NOT NULL,
	sum NUMERIC NOT NULL,
	user_id BIGINT NOT NULL,
	processed_at TIMESTAMP NOT NULL DEFAULT NOW(),
	PRIMARY KEY (id),
	CONSTRAINT fk_user
        FOREIGN KEY(user_id)
            REFERENCES users(id)
);
