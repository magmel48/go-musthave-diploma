// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	orders "github.com/magmel48/go-musthave-diploma/internal/orders"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, orderNumber, userID
func (_m *Repository) Create(ctx context.Context, orderNumber string, userID int64) (*orders.Order, error) {
	ret := _m.Called(ctx, orderNumber, userID)

	var r0 *orders.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *orders.Order); ok {
		r0 = rf(ctx, orderNumber, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orders.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, orderNumber, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUser provides a mock function with given fields: ctx, userID
func (_m *Repository) ListByUser(ctx context.Context, userID int64) ([]orders.Order, error) {
	ret := _m.Called(ctx, userID)

	var r0 []orders.Order
	if rf, ok := ret.Get(0).(func(context.Context, int64) []orders.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]orders.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUnprocessedOrders provides a mock function with given fields: ctx
func (_m *Repository) FindUnprocessedOrders(ctx context.Context) ([]orders.Order, error) {
	ret := _m.Called(ctx)

	var r0 []orders.Order
	if rf, ok := ret.Get(0).(func(context.Context) []orders.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]orders.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserOrder provides a mock function with given fields: ctx, orderNumber, userID
func (_m *Repository) FindByUser(ctx context.Context, orderNumber string, userID int64) (*orders.Order, error) {
	ret := _m.Called(ctx, orderNumber, userID)

	var r0 *orders.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *orders.Order); ok {
		r0 = rf(ctx, orderNumber, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orders.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, orderNumber, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, order
func (_m *Repository) Update(ctx context.Context, order orders.Order) (int64, error) {
	ret := _m.Called(ctx, order)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, orders.Order) int64); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, orders.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
