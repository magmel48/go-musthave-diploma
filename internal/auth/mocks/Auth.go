// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	users "github.com/magmel48/go-musthave-diploma/internal/users"
)

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

// CheckUser provides a mock function with given fields: ctx, user
func (_m *Auth) CheckUser(ctx context.Context, user users.User) (int64, error) {
	ret := _m.Called(ctx, user)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, users.User) int64); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, users.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNew provides a mock function with given fields: ctx, user
func (_m *Auth) CreateNew(ctx context.Context, user users.User) (*users.User, error) {
	ret := _m.Called(ctx, user)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(context.Context, users.User) *users.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, users.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreUser provides a mock function with given fields: ctx, user
func (_m *Auth) StoreUser(ctx *gin.Context, user users.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, users.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
